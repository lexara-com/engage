---
// Debug session page for firm portal
// Server-side authentication is handled by middleware
const user = Astro.locals.user;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Debug Session - Firm Portal</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 2rem;
      background: #f7fafc;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      background: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .section {
      margin: 2rem 0;
      padding: 1rem;
      border: 1px solid #e2e8f0;
      border-radius: 6px;
      background: #f8f9fa;
    }
    .button {
      background: #667eea;
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      margin: 0.5rem;
      text-decoration: none;
      display: inline-block;
    }
    .button:hover {
      background: #5a67d8;
    }
    .button.danger {
      background: #dc3545;
    }
    .button.danger:hover {
      background: #c82333;
    }
    pre {
      background: #f1f3f4;
      padding: 1rem;
      border-radius: 4px;
      overflow-x: auto;
      white-space: pre-wrap;
    }
    .status {
      padding: 1rem;
      border-radius: 6px;
      margin: 1rem 0;
    }
    .status.success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    .status.error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Firm Portal Session Debug</h1>
    <p>This page shows all session-related data and authentication status.</p>

    <!-- Authentication Status -->
    <div class="section">
      <h3>Authentication Status</h3>
      {user ? (
        <div class="status success">
          <strong>✅ Authenticated</strong><br>
          User: <strong>{user.name || user.email}</strong><br>
          Email: {user.email}<br>
          User ID: {user.id}<br>
          Firm ID: {user.firmId}<br>
          Roles: {user.roles?.join(', ') || 'None'}
        </div>
      ) : (
        <div class="status error">
          <strong>❌ Not Authenticated</strong><br>
          No valid session found. You should be redirected to login.
        </div>
      )}
    </div>

    <!-- Server-side Context -->
    <div class="section">
      <h3>Server-side Context (Astro.locals)</h3>
      <pre id="server-context">{JSON.stringify({
        user: Astro.locals.user,
        firm: Astro.locals.firm,
        isAuthenticated: Astro.locals.isAuthenticated,
        sessionExpiry: Astro.locals.sessionExpiry
      }, null, 2)}</pre>
    </div>

    <!-- Client-side Cookie Info -->
    <div class="section">
      <h3>Current Cookies</h3>
      <pre id="cookies"></pre>
    </div>

    <div class="section">
      <h3>Session Data</h3>
      <pre id="session-data"></pre>
    </div>

    <!-- Actions -->
    <div class="section">
      <h3>Actions</h3>
      <button class="button danger" onclick="clearAllSessions()">Clear All Sessions</button>
      <a href="/firm/dashboard" class="button">Test Dashboard Access</a>
      <a href="/firm/login" class="button">Go to Login Page</a>
      <a href="/firm/logout" class="button">Logout</a>
    </div>

    <!-- Debug Log -->
    <div class="section">
      <h3>Debug Log</h3>
      <pre id="debug-log"></pre>
    </div>
  </div>

  <script>
    function log(message) {
      const debugLog = document.getElementById('debug-log');
      debugLog.textContent += new Date().toISOString() + ': ' + message + '\n';
      console.log(message);
    }

    function displayCookies() {
      const cookiesElement = document.getElementById('cookies');
      const allCookies = document.cookie;
      
      if (!allCookies) {
        cookiesElement.textContent = 'No cookies found';
        return;
      }

      const cookies = {};
      allCookies.split(';').forEach(cookie => {
        const [name, value] = cookie.trim().split('=');
        if (name && value) {
          cookies[name] = value;
        }
      });

      cookiesElement.textContent = JSON.stringify(cookies, null, 2);
      log('Displayed current cookies');
    }

    function displaySessionData() {
      const sessionElement = document.getElementById('session-data');
      const cookies = {};
      
      document.cookie.split(';').forEach(cookie => {
        const [name, value] = cookie.trim().split('=');
        if (name && value) {
          cookies[name] = value;
        }
      });

      const sessionCookie = cookies['firm_session'];
      if (!sessionCookie) {
        sessionElement.textContent = 'No firm_session cookie found';
        log('No firm session cookie found');
        return;
      }

      try {
        const sessionData = JSON.parse(decodeURIComponent(sessionCookie));
        const now = Math.floor(Date.now() / 1000);
        const isExpired = sessionData.exp && sessionData.exp < now;
        
        sessionElement.textContent = JSON.stringify({
          ...sessionData,
          isExpired: isExpired,
          expiresAt: sessionData.exp ? new Date(sessionData.exp * 1000).toISOString() : 'No expiration',
          timeLeft: sessionData.exp ? (sessionData.exp - now) + ' seconds' : 'No expiration'
        }, null, 2);
        
        log('Session data parsed successfully');
        if (isExpired) {
          log('WARNING: Session is expired!');
        }
      } catch (error) {
        sessionElement.textContent = 'Error parsing session data: ' + error.message;
        log('Error parsing session: ' + error.message);
      }
    }

    function clearAllSessions() {
      // Clear firm session cookie
      document.cookie = 'firm_session=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; samesite=strict';
      
      // Clear all cookies
      document.cookie.split(";").forEach(function(c) { 
        document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
      });
      
      // Clear storage
      if (typeof(Storage) !== "undefined") {
        localStorage.clear();
        sessionStorage.clear();
      }
      
      log('All sessions and cookies cleared');
      
      // Refresh the display
      setTimeout(() => {
        displayCookies();
        displaySessionData();
      }, 100);
    }

    // Initialize on page load
    window.addEventListener('load', () => {
      log('Page loaded, displaying session information');
      displayCookies();
      displaySessionData();
    });
  </script>
</body>
</html>
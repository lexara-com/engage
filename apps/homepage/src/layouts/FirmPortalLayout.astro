---
interface Props {
  title: string;
  description?: string;
}

const { title, description = "Lexara Firm Portal" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title}</title>
  <meta name="description" content={description}>
  
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  
  <!-- Official Brand Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap" rel="stylesheet">
  
  <!-- Tailwind CSS -->
</head>
<body class="font-body antialiased bg-gray-50 text-lexara-darkNavy">
  <!-- Dashboard Header with User Navigation -->
  <header class="bg-white shadow-sm border-b border-gray-200">
    <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center py-4">
        <div class="flex items-center">
          <a href="/firm/dashboard" class="flex items-center">
            <img src="/lexara-logo.svg" alt="Lexara" class="h-8 w-auto">
            <span class="ml-3 text-lg font-semibold text-lexara-secondary">Firm Portal</span>
          </a>
        </div>
        
        <div class="hidden md:flex items-center space-x-8">
          <a href="/firm/dashboard" class="text-lexara-lightNavy hover:text-lexara-darkNavy transition-colors font-semibold">Dashboard</a>
          <a href="/firm/conversations" class="text-lexara-lightNavy hover:text-lexara-darkNavy transition-colors font-semibold">Conversations</a>
          <a href="/firm/settings" class="text-lexara-lightNavy hover:text-lexara-darkNavy transition-colors font-semibold">Settings</a>
        </div>

        <!-- User Menu -->
        <div class="flex items-center space-x-4">
          <div id="user-info" class="hidden flex items-center space-x-3">
            <div class="text-right">
              <p id="user-name" class="text-sm font-medium text-lexara-secondary"></p>
              <p id="user-email" class="text-xs text-lexara-gray"></p>
            </div>
            <div class="w-8 h-8 bg-lexara-primary rounded-full flex items-center justify-center">
              <span id="user-initials" class="text-sm font-medium text-white"></span>
            </div>
          </div>
          <button id="logout-button" class="hidden text-lexara-lightNavy hover:text-lexara-darkNavy transition-colors font-semibold">
            Sign Out
          </button>
          <div id="auth-loading" class="text-lexara-gray">
            Loading...
          </div>
        </div>
      </div>
    </nav>
  </header>

  <main>
    <slot />
  </main>

  <script is:inline>
    // Initialize Auth0 inline (avoiding import issues)
    let auth0Client = null;
    
    async function initializeAuth() {
      try {
        // Load Auth0 script if not already loaded
        if (!window.auth0) {
          const script = document.createElement('script');
          script.src = 'https://cdn.auth0.com/js/auth0-spa-js/2.0/auth0-spa-js.production.js';
          document.head.appendChild(script);
          await new Promise((resolve) => {
            script.onload = resolve;
          });
        }

        // Initialize Auth0 client
        auth0Client = await window.auth0.createAuth0Client({
          domain: 'dev-sv0pf6cz2530xz0o.us.auth0.com',
          clientId: 'OjsR6To3nDqYDLVHtRjDFpk7wRcCfrfi',
          authorizationParams: {
            redirect_uri: window.location.origin + '/firm/callback'
          },
          cacheLocation: 'localstorage',
          useRefreshTokens: true
        });
      } catch (error) {
        console.error('Failed to initialize Auth0:', error);
      }
    }

    async function getUser() {
      if (!auth0Client) return null;
      
      try {
        const isAuthenticated = await auth0Client.isAuthenticated();
        if (!isAuthenticated) return null;

        return await auth0Client.getUser();
      } catch (error) {
        console.error('Failed to get user:', error);
        return null;
      }
    }

    async function logout() {
      if (!auth0Client) return;
      
      try {
        await auth0Client.logout({
          logoutParams: {
            returnTo: window.location.origin + '/firm/login'
          }
        });
      } catch (error) {
        console.error('Failed to logout:', error);
      }
    }
    
    document.addEventListener('DOMContentLoaded', async () => {
      const userInfo = document.getElementById('user-info');
      const logoutButton = document.getElementById('logout-button');
      const authLoading = document.getElementById('auth-loading');
      const userName = document.getElementById('user-name');
      const userEmail = document.getElementById('user-email');
      const userInitials = document.getElementById('user-initials');
      
      try {
        await initializeAuth();
        const user = await getUser();
        
        if (user) {
          // Update user info
          if (userName) userName.textContent = user.name;
          if (userEmail) userEmail.textContent = user.email;
          if (userInitials) {
            const initials = user.name.split(' ').map(n => n[0]).join('').toUpperCase();
            userInitials.textContent = initials;
          }
          
          // Show user info and hide loading
          if (userInfo) userInfo.classList.remove('hidden');
          if (logoutButton) logoutButton.classList.remove('hidden');
          if (authLoading) authLoading.style.display = 'none';
          
          // Setup logout
          if (logoutButton) {
            logoutButton.addEventListener('click', async () => {
              await logout();
            });
          }
        } else {
          // Redirect to login if not authenticated
          window.location.href = '/firm/login';
        }
      } catch (error) {
        console.error('Authentication error:', error);
        window.location.href = '/firm/login';
      }
    });
  </script>
</body>
</html>
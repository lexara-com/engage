---
import BaseLayout from '@/layouts/BaseLayout.astro';
---

<BaseLayout 
  title="Dashboard - Lexara Firm Portal" 
  description="Your firm's AI-powered client intake dashboard"
>
  <div class="min-h-screen bg-gray-50">
    <!-- Welcome Header -->
    <div class="bg-white shadow-sm border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div class="flex items-center justify-between">
          <div>
            <h1 id="welcome-title" class="text-2xl font-bold text-lexara-secondary">Welcome back!</h1>
            <p class="text-lexara-gray mt-1">Here's what's happening with your client intake today.</p>
          </div>
          <div class="flex items-center space-x-4">
            <div class="text-right">
              <p class="text-sm text-lexara-gray">Today</p>
              <p id="current-date" class="text-sm font-medium text-lexara-secondary"></p>
            </div>
            <button class="bg-lexara-primary text-white px-4 py-2 rounded-lg hover:bg-blue-800 transition-colors">
              <span class="text-sm font-medium">New Conversation</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Loading State -->
      <div id="loading-state" class="text-center py-12">
        <div class="w-8 h-8 border-3 border-lexara-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
        <p class="text-lexara-gray">Loading your dashboard...</p>
      </div>

      <!-- Error State -->
      <div id="error-state" class="hidden text-center py-12">
        <div class="w-12 h-12 bg-lexara-error/10 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-6 h-6 text-lexara-error" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-lexara-secondary mb-2">Unable to load dashboard</h3>
        <p id="error-message" class="text-lexara-gray mb-4">We're having trouble connecting to your data.</p>
        <button id="retry-button" class="bg-lexara-primary text-white px-4 py-2 rounded-lg hover:bg-blue-800 transition-colors">
          Try Again
        </button>
      </div>

      <!-- Dashboard Content -->
      <div id="dashboard-content" class="hidden space-y-8">
        <!-- Stats Overview -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <!-- Today's Conversations -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-lexara-gray">Today</p>
                <p id="today-conversations" class="text-2xl font-bold text-lexara-secondary">-</p>
                <p class="text-xs text-lexara-gray mt-1">New conversations</p>
              </div>
              <div class="w-12 h-12 bg-lexara-primary/10 rounded-full flex items-center justify-center">
                <svg class="w-6 h-6 text-lexara-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Active Conversations -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-lexara-gray">Active</p>
                <p id="active-conversations" class="text-2xl font-bold text-lexara-secondary">-</p>
                <p class="text-xs text-lexara-gray mt-1">In progress</p>
              </div>
              <div class="w-12 h-12 bg-lexara-accent/10 rounded-full flex items-center justify-center">
                <svg class="w-6 h-6 text-lexara-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Completed This Week -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-lexara-gray">This Week</p>
                <p id="weekly-completed" class="text-2xl font-bold text-lexara-secondary">-</p>
                <p class="text-xs text-lexara-gray mt-1">Completed</p>
              </div>
              <div class="w-12 h-12 bg-lexara-success/10 rounded-full flex items-center justify-center">
                <svg class="w-6 h-6 text-lexara-success" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Conversion Rate -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-lexara-gray">Conversion</p>
                <p id="conversion-rate" class="text-2xl font-bold text-lexara-secondary">-</p>
                <p class="text-xs text-lexara-gray mt-1">Lead to client</p>
              </div>
              <div class="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
                <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>

        <!-- Recent Conversations & Quick Actions -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Recent Conversations -->
          <div class="lg:col-span-2">
            <div class="bg-white rounded-xl shadow-sm">
              <div class="p-6 border-b border-gray-200">
                <div class="flex items-center justify-between">
                  <h3 class="text-lg font-semibold text-lexara-secondary">Recent Conversations</h3>
                  <a href="/conversations" class="text-sm text-lexara-primary hover:underline">View all</a>
                </div>
              </div>
              
              <div id="conversations-list" class="divide-y divide-gray-200">
                <!-- Conversation items will be populated here -->
              </div>
              
              <div id="no-conversations" class="hidden p-8 text-center">
                <div class="w-16 h-16 bg-lexara-light rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg class="w-8 h-8 text-lexara-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                  </svg>
                </div>
                <h4 class="text-lg font-medium text-lexara-secondary mb-2">No conversations yet</h4>
                <p class="text-lexara-gray mb-4">Start engaging with potential clients and they'll appear here.</p>
                <button class="bg-lexara-primary text-white px-4 py-2 rounded-lg hover:bg-blue-800 transition-colors">
                  Share Your Intake Link
                </button>
              </div>
            </div>
          </div>

          <!-- Quick Actions & Notifications -->
          <div class="space-y-6">
            <!-- Quick Actions -->
            <div class="bg-white rounded-xl shadow-sm p-6">
              <h3 class="text-lg font-semibold text-lexara-secondary mb-4">Quick Actions</h3>
              <div class="space-y-3">
                <a href="/conversations/new" class="flex items-center p-3 rounded-lg border border-gray-200 hover:bg-gray-50 transition-colors">
                  <div class="w-8 h-8 bg-lexara-primary/10 rounded-lg flex items-center justify-center mr-3">
                    <svg class="w-4 h-4 text-lexara-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                  </div>
                  <div>
                    <p class="text-sm font-medium text-lexara-secondary">Start Conversation</p>
                    <p class="text-xs text-lexara-gray">Begin manual intake</p>
                  </div>
                </a>

                <a href="/settings/intake" class="flex items-center p-3 rounded-lg border border-gray-200 hover:bg-gray-50 transition-colors">
                  <div class="w-8 h-8 bg-lexara-accent/10 rounded-lg flex items-center justify-center mr-3">
                    <svg class="w-4 h-4 text-lexara-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                  </div>
                  <div>
                    <p class="text-sm font-medium text-lexara-secondary">Customize Intake</p>
                    <p class="text-xs text-lexara-gray">Configure questions</p>
                  </div>
                </a>

                <a href="/analytics" class="flex items-center p-3 rounded-lg border border-gray-200 hover:bg-gray-50 transition-colors">
                  <div class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center mr-3">
                    <svg class="w-4 h-4 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                  </div>
                  <div>
                    <p class="text-sm font-medium text-lexara-secondary">View Analytics</p>
                    <p class="text-xs text-lexara-gray">Detailed reports</p>
                  </div>
                </a>
              </div>
            </div>

            <!-- System Status -->
            <div class="bg-white rounded-xl shadow-sm p-6">
              <h3 class="text-lg font-semibold text-lexara-secondary mb-4">System Status</h3>
              <div class="space-y-3">
                <div class="flex items-center justify-between">
                  <span class="text-sm text-lexara-gray">AI Agent</span>
                  <div id="ai-status" class="flex items-center">
                    <div class="w-2 h-2 bg-lexara-success rounded-full mr-2"></div>
                    <span class="text-xs text-lexara-success">Operational</span>
                  </div>
                </div>
                <div class="flex items-center justify-between">
                  <span class="text-sm text-lexara-gray">Intake Portal</span>
                  <div id="portal-status" class="flex items-center">
                    <div class="w-2 h-2 bg-lexara-success rounded-full mr-2"></div>
                    <span class="text-xs text-lexara-success">Online</span>
                  </div>
                </div>
                <div class="flex items-center justify-between">
                  <span class="text-sm text-lexara-gray">Conflict Detection</span>
                  <div id="conflict-status" class="flex items-center">
                    <div class="w-2 h-2 bg-lexara-success rounded-full mr-2"></div>
                    <span class="text-xs text-lexara-success">Active</span>
                  </div>
                </div>
              </div>
              
              <div class="mt-4 pt-4 border-t border-gray-200">
                <div class="flex items-center justify-between text-xs text-lexara-gray">
                  <span>Last checked</span>
                  <span id="last-status-check">Just now</span>
                </div>
              </div>
            </div>

            <!-- Recent Activity -->
            <div class="bg-white rounded-xl shadow-sm p-6">
              <h3 class="text-lg font-semibold text-lexara-secondary mb-4">Recent Activity</h3>
              <div id="recent-activity" class="space-y-3">
                <!-- Activity items will be populated here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  import { initializeAuth, requireAuth } from '@/utils/auth';
  import { createAPIClient } from '@/utils/api-client';
  
  document.addEventListener('DOMContentLoaded', async () => {
    await initializeAuth();
    await loadDashboard();
    setupEventListeners();
    updateDateTime();
    
    // Refresh data every 30 seconds
    setInterval(async () => {
      await refreshDashboardData();
    }, 30000);
  });

  async function loadDashboard() {
    try {
      showLoading(true);
      
      // Require authentication
      const user = await requireAuth();
      updateWelcomeMessage(user);
      
      // Create API client
      const apiClient = await createAPIClient();
      
      // Load dashboard data in parallel
      const [
        conversationsData,
        analyticsData,
        recentActivity
      ] = await Promise.allSettled([
        apiClient.getConversations({ limit: 10 }),
        apiClient.getAnalytics({ period: 'week' }),
        apiClient.getRecentActivity({ limit: 5 })
      ]);
      
      // Update UI with loaded data
      if (conversationsData.status === 'fulfilled') {
        updateConversationsList(conversationsData.value.data.conversations);
        updateConversationStats(conversationsData.value.data);
      }
      
      if (analyticsData.status === 'fulfilled') {
        updateAnalyticsStats(analyticsData.value.data);
      }
      
      if (recentActivity.status === 'fulfilled') {
        updateRecentActivity(recentActivity.value.data.activities || []);
      }
      
      showDashboard();
      
    } catch (error) {
      console.error('Failed to load dashboard:', error);
      showError('Unable to load dashboard. Please check your connection and try again.');
    }
  }

  async function refreshDashboardData() {
    try {
      const apiClient = await createAPIClient();
      const analyticsData = await apiClient.getAnalytics({ period: 'today' });
      
      if (analyticsData.success) {
        updateQuickStats(analyticsData.data);
      }
      
      updateLastStatusCheck();
    } catch (error) {
      console.error('Failed to refresh dashboard data:', error);
    }
  }

  function updateWelcomeMessage(user) {
    const welcomeTitle = document.getElementById('welcome-title');
    if (welcomeTitle && user.name) {
      const firstName = user.name.split(' ')[0];
      welcomeTitle.textContent = `Welcome back, ${firstName}!`;
    }
  }

  function updateDateTime() {
    const currentDate = document.getElementById('current-date');
    if (currentDate) {
      const now = new Date();
      currentDate.textContent = now.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      });
    }
  }

  function updateConversationsList(conversations) {
    const conversationsList = document.getElementById('conversations-list');
    const noConversations = document.getElementById('no-conversations');
    
    if (!conversations || conversations.length === 0) {
      if (conversationsList) conversationsList.innerHTML = '';
      if (noConversations) noConversations.classList.remove('hidden');
      return;
    }

    if (noConversations) noConversations.classList.add('hidden');
    
    if (conversationsList) {
      conversationsList.innerHTML = conversations.map(conv => `
        <div class="p-6 hover:bg-gray-50 transition-colors">
          <div class="flex items-center justify-between">
            <div class="flex-1">
              <div class="flex items-center space-x-3">
                <div class="w-10 h-10 rounded-full bg-lexara-primary/10 flex items-center justify-center">
                  <span class="text-sm font-medium text-lexara-primary">
                    ${conv.userIdentity?.name ? conv.userIdentity.name.charAt(0).toUpperCase() : '?'}
                  </span>
                </div>
                <div class="flex-1">
                  <p class="text-sm font-medium text-lexara-secondary">
                    ${conv.userIdentity?.name || 'Anonymous User'}
                  </p>
                  <p class="text-xs text-lexara-gray">
                    ${conv.userIdentity?.email || 'No email provided'}
                  </p>
                </div>
              </div>
              <div class="mt-2">
                <p class="text-sm text-lexara-gray">
                  ${conv.phase.charAt(0).toUpperCase() + conv.phase.slice(1).replace('_', ' ')} • 
                  ${new Date(conv.lastActivity).toLocaleDateString()}
                </p>
              </div>
            </div>
            <div class="flex items-center space-x-3">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(conv.phase)}">
                ${getStatusText(conv.phase)}
              </span>
              <a href="/conversations/${conv.sessionId}" class="text-lexara-primary hover:text-blue-800">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
            </div>
          </div>
        </div>
      `).join('');
    }
  }

  function updateConversationStats(data) {
    const todayElement = document.getElementById('today-conversations');
    const activeElement = document.getElementById('active-conversations');
    
    if (todayElement) {
      const today = new Date().toDateString();
      const todayCount = data.conversations?.filter(conv => 
        new Date(conv.createdAt).toDateString() === today
      ).length || 0;
      todayElement.textContent = todayCount.toString();
    }
    
    if (activeElement) {
      const activeCount = data.conversations?.filter(conv => 
        conv.phase === 'data_gathering' || conv.phase === 'pre_login'
      ).length || 0;
      activeElement.textContent = activeCount.toString();
    }
  }

  function updateAnalyticsStats(analytics) {
    const weeklyElement = document.getElementById('weekly-completed');
    const conversionElement = document.getElementById('conversion-rate');
    
    if (weeklyElement && analytics.weeklyCompleted !== undefined) {
      weeklyElement.textContent = analytics.weeklyCompleted.toString();
    }
    
    if (conversionElement && analytics.conversionRate !== undefined) {
      conversionElement.textContent = `${Math.round(analytics.conversionRate * 100)}%`;
    }
  }

  function updateQuickStats(analytics) {
    if (analytics.todayConversations !== undefined) {
      const element = document.getElementById('today-conversations');
      if (element) element.textContent = analytics.todayConversations.toString();
    }
  }

  function updateRecentActivity(activities) {
    const activityContainer = document.getElementById('recent-activity');
    if (!activityContainer) return;
    
    if (activities.length === 0) {
      activityContainer.innerHTML = `
        <p class="text-sm text-lexara-gray text-center py-4">No recent activity</p>
      `;
      return;
    }
    
    activityContainer.innerHTML = activities.map(activity => `
      <div class="flex items-start space-x-3">
        <div class="w-6 h-6 bg-lexara-primary/10 rounded-full flex items-center justify-center mt-0.5">
          <div class="w-2 h-2 bg-lexara-primary rounded-full"></div>
        </div>
        <div class="flex-1">
          <p class="text-sm text-lexara-secondary">${activity.description}</p>
          <p class="text-xs text-lexara-gray">${formatTimeAgo(activity.timestamp)}</p>
        </div>
      </div>
    `).join('');
  }

  function updateLastStatusCheck() {
    const element = document.getElementById('last-status-check');
    if (element) {
      element.textContent = 'Just now';
    }
  }

  function getStatusColor(phase) {
    switch (phase) {
      case 'completed': return 'bg-lexara-success/10 text-lexara-success';
      case 'data_gathering': return 'bg-lexara-primary/10 text-lexara-primary';
      case 'pre_login': return 'bg-lexara-accent/10 text-lexara-accent';
      case 'terminated': return 'bg-lexara-error/10 text-lexara-error';
      default: return 'bg-gray-100 text-gray-600';
    }
  }

  function getStatusText(phase) {
    switch (phase) {
      case 'completed': return 'Completed';
      case 'data_gathering': return 'In Progress';
      case 'pre_login': return 'Starting';
      case 'terminated': return 'Ended';
      default: return 'Unknown';
    }
  }

  function formatTimeAgo(timestamp) {
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now.getTime() - time.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return 'Just now';
    if (diffMins < 60) return `${diffMins}m ago`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours}h ago`;
    
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays}d ago`;
  }

  function setupEventListeners() {
    const retryButton = document.getElementById('retry-button');
    if (retryButton) {
      retryButton.addEventListener('click', loadDashboard);
    }
  }

  function showLoading(show) {
    const loadingState = document.getElementById('loading-state');
    const dashboardContent = document.getElementById('dashboard-content');
    const errorState = document.getElementById('error-state');
    
    if (show) {
      loadingState?.classList.remove('hidden');
      dashboardContent?.classList.add('hidden');
      errorState?.classList.add('hidden');
    }
  }

  function showDashboard() {
    const loadingState = document.getElementById('loading-state');
    const dashboardContent = document.getElementById('dashboard-content');
    const errorState = document.getElementById('error-state');
    
    loadingState?.classList.add('hidden');
    dashboardContent?.classList.remove('hidden');
    errorState?.classList.add('hidden');
  }

  function showError(message) {
    const loadingState = document.getElementById('loading-state');
    const dashboardContent = document.getElementById('dashboard-content');
    const errorState = document.getElementById('error-state');
    const errorMessage = document.getElementById('error-message');
    
    loadingState?.classList.add('hidden');
    dashboardContent?.classList.add('hidden');
    errorState?.classList.remove('hidden');
    
    if (errorMessage) {
      errorMessage.textContent = message;
    }
  }
</script>

<style>
  .border-3 {
    border-width: 3px;
  }
</style>
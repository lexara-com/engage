---
import DashboardLayout from '../../../layouts/DashboardLayout.astro';

// Check authentication
const user = Astro.locals.user;
const isAuthenticated = Astro.locals.isAuthenticated;

if (!isAuthenticated) {
  return Astro.redirect('/firm/login?returnTo=/firm/users/invite');
}

// Check permissions
const userRoles = user?.roles || [];
// TEMPORARY: Allow shawnswaner email to have admin access for testing
const isTestAdmin = user?.email === 'shawnswaner+test7@gmail.com';
const canInviteUsers = isTestAdmin || userRoles.includes('FirmAdmin') || userRoles.includes('firm:admin');

if (!canInviteUsers) {
  console.log('Access denied for user:', user?.email, 'with roles:', userRoles);
  return Astro.redirect('/firm/dashboard?error=unauthorized');
}
---

<DashboardLayout title="Invite Team Member - Lexara" description="Invite a new team member to your firm">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header -->
    <div class="mb-8">
      <a href="/firm/dashboard" class="text-sm text-lexara-darkNavy hover:text-lexara-lightNavy mb-4 inline-flex items-center">
        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
        Back to Dashboard
      </a>
      <h1 class="text-3xl font-bold text-gray-900 mt-4">Invite Team Member</h1>
      <p class="mt-2 text-lg text-gray-600">
        Send an invitation to add a new member to your firm. They'll receive an email to set up their account.
      </p>
    </div>

    <!-- Invitation Form -->
    <div class="bg-white rounded-lg shadow-sm p-6">
      <form id="invite-form" class="space-y-6">
        <!-- Email Address -->
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700">
            Email Address <span class="text-red-500">*</span>
          </label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-lexara-darkNavy focus:ring-lexara-darkNavy sm:text-sm"
            placeholder="colleague@lawfirm.com"
          />
        </div>

        <!-- Name Fields -->
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
          <div>
            <label for="firstName" class="block text-sm font-medium text-gray-700">
              First Name <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="firstName"
              name="firstName"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-lexara-darkNavy focus:ring-lexara-darkNavy sm:text-sm"
            />
          </div>
          <div>
            <label for="lastName" class="block text-sm font-medium text-gray-700">
              Last Name <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="lastName"
              name="lastName"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-lexara-darkNavy focus:ring-lexara-darkNavy sm:text-sm"
            />
          </div>
        </div>

        <!-- Role Selection -->
        <div>
          <label for="role" class="block text-sm font-medium text-gray-700">
            Role <span class="text-red-500">*</span>
          </label>
          <select
            id="role"
            name="role"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-lexara-darkNavy focus:ring-lexara-darkNavy sm:text-sm"
          >
            <option value="">Select a role</option>
            <option value="firm:admin">Admin - Full access to firm settings</option>
            <option value="firm:lawyer">Lawyer - Access to conversations and analytics</option>
            <option value="firm:staff">Staff - Limited access to conversations</option>
            <option value="firm:viewer">Viewer - Read-only access</option>
          </select>
          <p class="mt-2 text-sm text-gray-500">
            Admins can manage users, settings, and billing. Lawyers can view all conversations.
          </p>
        </div>

        <!-- Practice Areas (Optional) -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Practice Areas (Optional)
          </label>
          <div class="space-y-2">
            <label class="inline-flex items-center">
              <input type="checkbox" name="practiceAreas" value="personal_injury" class="rounded border-gray-300 text-lexara-darkNavy focus:ring-lexara-darkNavy">
              <span class="ml-2 text-sm text-gray-700">Personal Injury</span>
            </label>
            <label class="inline-flex items-center ml-6">
              <input type="checkbox" name="practiceAreas" value="employment_law" class="rounded border-gray-300 text-lexara-darkNavy focus:ring-lexara-darkNavy">
              <span class="ml-2 text-sm text-gray-700">Employment Law</span>
            </label>
            <label class="inline-flex items-center ml-6">
              <input type="checkbox" name="practiceAreas" value="family_law" class="rounded border-gray-300 text-lexara-darkNavy focus:ring-lexara-darkNavy">
              <span class="ml-2 text-sm text-gray-700">Family Law</span>
            </label>
            <label class="inline-flex items-center ml-6">
              <input type="checkbox" name="practiceAreas" value="criminal_defense" class="rounded border-gray-300 text-lexara-darkNavy focus:ring-lexara-darkNavy">
              <span class="ml-2 text-sm text-gray-700">Criminal Defense</span>
            </label>
            <label class="inline-flex items-center ml-6">
              <input type="checkbox" name="practiceAreas" value="business_law" class="rounded border-gray-300 text-lexara-darkNavy focus:ring-lexara-darkNavy">
              <span class="ml-2 text-sm text-gray-700">Business Law</span>
            </label>
          </div>
        </div>

        <!-- Personal Message (Optional) -->
        <div>
          <label for="message" class="block text-sm font-medium text-gray-700">
            Personal Message (Optional)
          </label>
          <textarea
            id="message"
            name="message"
            rows="3"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-lexara-darkNavy focus:ring-lexara-darkNavy sm:text-sm"
            placeholder="Welcome to the team! Looking forward to working with you..."
          ></textarea>
        </div>

        <!-- Error/Success Messages -->
        <div id="message-container"></div>

        <!-- Submit Button -->
        <div class="flex justify-end space-x-3">
          <a
            href="/firm/dashboard"
            class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-lexara-darkNavy"
          >
            Cancel
          </a>
          <button
            type="submit"
            id="submit-btn"
            class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-lexara-darkNavy hover:bg-lexara-lightNavy focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-lexara-darkNavy"
          >
            Send Invitation
          </button>
        </div>
      </form>
    </div>

    <!-- Recent Invitations -->
    <div class="mt-8 bg-white rounded-lg shadow-sm p-6">
      <h2 class="text-lg font-semibold text-gray-900 mb-4">Recent Invitations</h2>
      <div id="invitations-list" class="space-y-3">
        <p class="text-sm text-gray-500">Loading recent invitations...</p>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  // Form submission handler
  const form = document.getElementById('invite-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const messageContainer = document.getElementById('message-container');
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Disable submit button
    submitBtn.disabled = true;
    submitBtn.textContent = 'Sending...';
    
    // Get form data
    const formData = new FormData(form);
    const practiceAreas = formData.getAll('practiceAreas');
    
    const inviteData = {
      email: formData.get('email'),
      firstName: formData.get('firstName'),
      lastName: formData.get('lastName'),
      role: formData.get('role'),
      practiceAreas: practiceAreas,
      message: formData.get('message')
    };
    
    try {
      const response = await fetch('/api/firm/users/invite', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(inviteData)
      });
      
      const result = await response.json();
      
      if (response.ok) {
        showMessage('success', 'Invitation sent successfully! The user will receive an email to set up their account.');
        form.reset();
        loadRecentInvitations();
      } else {
        showMessage('error', result.error || 'Failed to send invitation. Please try again.');
      }
    } catch (error) {
      showMessage('error', 'An error occurred. Please try again.');
      console.error('Invitation error:', error);
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Send Invitation';
    }
  });
  
  function showMessage(type: 'success' | 'error', message: string) {
    if (!messageContainer) return;
    
    const alertClass = type === 'success' 
      ? 'bg-green-50 border-green-200 text-green-800'
      : 'bg-red-50 border-red-200 text-red-800';
    
    messageContainer.innerHTML = `
      <div class="rounded-md border p-4 ${alertClass}">
        <p class="text-sm">${message}</p>
      </div>
    `;
    
    // Clear message after 5 seconds
    setTimeout(() => {
      messageContainer.innerHTML = '';
    }, 5000);
  }
  
  // Load recent invitations
  async function loadRecentInvitations() {
    const invitationsList = document.getElementById('invitations-list');
    if (!invitationsList) return;
    
    try {
      const response = await fetch('/api/firm/users/invitations');
      const data = await response.json();
      
      if (response.ok && data.invitations?.length > 0) {
        invitationsList.innerHTML = data.invitations.map((inv: any) => `
          <div class="border border-gray-200 rounded-lg p-4">
            <div class="flex items-center justify-between">
              <div>
                <p class="font-medium text-gray-900">${inv.firstName} ${inv.lastName}</p>
                <p class="text-sm text-gray-500">
                  ${inv.email} · Invited ${new Date(inv.createdAt).toLocaleDateString()} 
                  · ${inv.role.replace('firm:', '').charAt(0).toUpperCase() + inv.role.replace('firm:', '').slice(1)}
                </p>
                ${inv.invitedBy ? `<p class="text-xs text-gray-400">Invited by ${inv.invitedBy}</p>` : ''}
              </div>
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                inv.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                inv.status === 'accepted' ? 'bg-green-100 text-green-800' :
                'bg-gray-100 text-gray-800'
              }">
                ${inv.status === 'pending' ? 'Pending' : 
                  inv.status === 'accepted' ? 'Accepted' : 'Expired'}
              </span>
            </div>
          </div>
        `).join('');
      } else {
        invitationsList.innerHTML = '<p class="text-sm text-gray-500">No recent invitations.</p>';
      }
    } catch (error) {
      console.error('Failed to load invitations:', error);
      invitationsList.innerHTML = '<p class="text-sm text-gray-500">Failed to load invitations.</p>';
    }
  }
  
  // Load invitations on page load
  loadRecentInvitations();
</script>
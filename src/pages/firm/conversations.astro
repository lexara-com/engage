---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ConversationDetailModal from '../../components/ConversationDetailModal.astro';
import { fetchConversations } from '../../lib/api/conversations';

// Server-side authentication is handled by middleware
const user = Astro.locals.user;
const isAuthenticated = Astro.locals.isAuthenticated;

// Set cache headers to prevent aggressive caching
Astro.response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate, private, max-age=0');
Astro.response.headers.set('Pragma', 'no-cache');
Astro.response.headers.set('Expires', '0');
Astro.response.headers.set('X-Cache-Status', 'BYPASS');

// Debug logging
console.log('[Conversations Page] Server-side render:', {
  isAuthenticated,
  user: user ? { email: user.email, firmId: user.firmId } : null,
  cookies: Astro.request.headers.get('cookie')?.substring(0, 100)
});

// Fetch conversations data directly (no HTTP request needed)
let conversations = [];
let error = null;
let pagination = null;
let debugInfo = {
  ssrAuth: isAuthenticated,
  ssrUser: user,
  dataFetchMethod: 'direct',
  apiResponse: null
};

// Check authentication before fetching data
if (!isAuthenticated || !user) {
  error = 'Authentication required';
  debugInfo.apiResponse = 'not_authenticated';
} else {
  try {
    // Get query parameters
    const url = new URL(Astro.request.url);
    const params = url.searchParams;
    
    // Fetch conversations directly using the shared logic
    const result = await fetchConversations(user.firmId, {
      page: parseInt(params.get('page') || '1'),
      limit: parseInt(params.get('limit') || '20'),
      status: params.get('status') || undefined,
      search: params.get('search') || undefined,
      practiceArea: params.get('practice') || undefined,
      assignedTo: params.get('assigned') || undefined
    });
    
    if (result.success) {
      conversations = result.data.conversations;
      pagination = result.data.pagination;
      debugInfo.apiResponse = 'success';
    } else {
      error = result.error || 'Failed to load conversations';
      debugInfo.apiResponse = 'error';
    }
    
  } catch (e) {
    error = 'Failed to load conversations';
    console.error('Error fetching conversations:', e);
    debugInfo.apiResponse = 'error';
  }
}

// Format date helper
function formatDate(dateString: string) {
  const date = new Date(dateString);
  const now = new Date();
  const diff = now.getTime() - date.getTime();
  const hours = Math.floor(diff / (1000 * 60 * 60));
  const days = Math.floor(hours / 24);
  
  if (hours < 1) return 'Just now';
  if (hours < 24) return `${hours}h ago`;
  if (days < 7) return `${days}d ago`;
  
  return date.toLocaleDateString();
}

// Get status color
function getStatusColor(status: string) {
  switch (status) {
    case 'active': return 'bg-green-100 text-green-800';
    case 'completed': return 'bg-blue-100 text-blue-800';
    case 'terminated': return 'bg-red-100 text-red-800';
    default: return 'bg-gray-100 text-gray-800';
  }
}

// Get conflict status color
function getConflictColor(status: string) {
  switch (status) {
    case 'clear': return 'bg-green-100 text-green-800';
    case 'potential': return 'bg-yellow-100 text-yellow-800';
    case 'confirmed': return 'bg-red-100 text-red-800';
    default: return 'bg-gray-100 text-gray-800';
  }
}

// Format practice area
function formatPracticeArea(area: string) {
  return area.split('_').map(word => 
    word.charAt(0).toUpperCase() + word.slice(1)
  ).join(' ');
}
---

<BaseLayout 
  title="Conversations - Lexara Firm Portal" 
  description="Manage client conversations and intake sessions"
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Page Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-heading font-normal text-lexara-darkNavy">Conversations</h1>
      <p class="text-lexara-lightNavy mt-2">Manage and review client intake conversations</p>
    </div>

    <!-- Filters and Search -->
    <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div>
          <label class="block text-sm font-medium text-lexara-lightNavy mb-2">Search</label>
          <input 
            type="search" 
            id="searchInput"
            placeholder="Search by name, email..." 
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-lexara-skyBlue focus:border-transparent"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-lexara-lightNavy mb-2">Status</label>
          <select id="statusFilter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-lexara-skyBlue focus:border-transparent">
            <option value="">All Status</option>
            <option value="active">Active</option>
            <option value="completed">Completed</option>
            <option value="terminated">Terminated</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-lexara-lightNavy mb-2">Practice Area</label>
          <select id="practiceFilter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-lexara-skyBlue focus:border-transparent">
            <option value="">All Areas</option>
            <option value="personal_injury">Personal Injury</option>
            <option value="family_law">Family Law</option>
            <option value="employment_law">Employment Law</option>
            <option value="criminal_defense">Criminal Defense</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-lexara-lightNavy mb-2">Assigned To</label>
          <select id="assignedFilter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-lexara-skyBlue focus:border-transparent">
            <option value="">All Attorneys</option>
            <option value="unassigned">Unassigned</option>
            <option value="attorney_123">James Wilson</option>
            <option value="attorney_456">Emily Davis</option>
            <option value="attorney_789">David Brown</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Conversations List -->
    <div class="bg-white rounded-lg shadow-sm overflow-hidden">
      {error ? (
        <div class="p-6 text-center">
          <div class="text-red-600 mb-4">
            <svg class="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <p class="text-lg text-gray-700">{error}</p>
        </div>
      ) : conversations.length === 0 ? (
        <div class="p-6 text-center">
          <p class="text-lg text-gray-500">No conversations found</p>
        </div>
      ) : (
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Client
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Practice Area
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Assigned To
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Conflict
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Last Activity
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {conversations.map((conversation: any) => (
                <tr class="hover:bg-gray-50 cursor-pointer" data-conversation-id={conversation.sessionId}>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div class="text-sm font-medium text-gray-900">{conversation.clientName}</div>
                      <div class="text-sm text-gray-500">{conversation.clientEmail}</div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class="text-sm text-gray-900">{formatPracticeArea(conversation.practiceArea)}</span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(conversation.status)}`}>
                      {conversation.status}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class="text-sm text-gray-900">
                      {conversation.assignedToName || <span class="text-gray-500 italic">Unassigned</span>}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getConflictColor(conversation.conflictStatus)}`}>
                      {conversation.conflictStatus}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {formatDate(conversation.lastActivity)}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button class="text-lexara-darkNavy hover:text-lexara-lightNavy mr-3" data-action="view" data-id={conversation.sessionId}>
                      View
                    </button>
                    <button class="text-lexara-darkNavy hover:text-lexara-lightNavy" data-action="export" data-id={conversation.sessionId}>
                      Export
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>

    <!-- Pagination -->
    {pagination && pagination.pages > 1 && (
      <div class="mt-6 flex items-center justify-between">
        <div class="text-sm text-gray-700">
          Showing page {pagination.page} of {pagination.pages} ({pagination.total} total)
        </div>
        <div class="flex space-x-2">
          <button 
            class="px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={pagination.page === 1}
            onclick="handlePagination('prev')"
          >
            Previous
          </button>
          <button 
            class="px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={pagination.page === pagination.pages}
            onclick="handlePagination('next')"
          >
            Next
          </button>
        </div>
      </div>
    )}

    <!-- Debug Information (Collapsible) -->
    <details class="mt-8 bg-gray-50 rounded-lg p-6">
      <summary class="cursor-pointer font-semibold text-gray-700 hover:text-gray-900">
        Debug Information
      </summary>
      <div class="mt-4 space-y-4">
        <!-- Session Information -->
        <div class="bg-white rounded-lg p-4">
          <h3 class="font-semibold text-gray-700 mb-2">Session Information</h3>
          <pre class="text-sm text-gray-600 overflow-x-auto">{JSON.stringify({
            user: user,
            isAuthenticated: isAuthenticated,
            debugInfo: debugInfo,
            timestamp: new Date().toISOString(),
            version: 'v6-2025-01-08-auth-header'
          }, null, 2)}</pre>
        </div>

        <!-- API Response -->
        <div class="bg-white rounded-lg p-4">
          <h3 class="font-semibold text-gray-700 mb-2">API Response</h3>
          <pre class="text-sm text-gray-600 overflow-x-auto">{JSON.stringify({
            conversationCount: conversations.length,
            pagination: pagination,
            error: error
          }, null, 2)}</pre>
        </div>

        <!-- Client-side Cookies -->
        <div class="bg-white rounded-lg p-4">
          <h3 class="font-semibold text-gray-700 mb-2">Client-side Cookies</h3>
          <pre id="client-cookies" class="text-sm text-gray-600 overflow-x-auto">Loading...</pre>
        </div>
      </div>
    </details>
  </div>

  <!-- Include the conversation detail modal -->
  <ConversationDetailModal />

  <script>
    // Check client-side cookies
    function displayClientCookies() {
      const debugElement = document.getElementById('client-cookies');
      const cookies = {};
      document.cookie.split(';').forEach(cookie => {
        const [name, value] = cookie.trim().split('=');
        if (name && value) {
          cookies[name] = value;
        }
      });

      let sessionData = null;
      const sessionCookie = cookies['firm_session'];
      if (sessionCookie) {
        try {
          sessionData = JSON.parse(decodeURIComponent(sessionCookie));
        } catch (error) {
          sessionData = { error: 'Failed to parse session cookie: ' + error.message };
        }
      }

      debugElement.textContent = JSON.stringify({
        allCookies: Object.keys(cookies),
        firmSessionExists: !!sessionCookie,
        firmSessionData: sessionData,
        timestamp: new Date().toISOString()
      }, null, 2);
    }

    // Handle filter changes
    function applyFilters() {
      const search = document.getElementById('searchInput').value;
      const status = document.getElementById('statusFilter').value;
      const practice = document.getElementById('practiceFilter').value;
      const assigned = document.getElementById('assignedFilter').value;

      const params = new URLSearchParams();
      if (search) params.set('search', search);
      if (status) params.set('status', status);
      if (practice) params.set('practice', practice);
      if (assigned) params.set('assigned', assigned);
      
      // Add cache-busting parameter to bypass Cloudflare cache
      params.set('_cb', Date.now().toString());

      const newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
      window.location.href = newUrl;
    }

    // Handle conversation row clicks
    function handleConversationClick(e) {
      const row = e.target.closest('tr[data-conversation-id]');
      if (row && !e.target.closest('button')) {
        const conversationId = row.dataset.conversationId;
        // Open conversation detail modal
        window.conversationModal.show(conversationId);
      }
    }

    // Handle action buttons
    function handleActionClick(e) {
      const button = e.target.closest('button[data-action]');
      if (button) {
        e.preventDefault();
        e.stopPropagation();
        const action = button.dataset.action;
        const id = button.dataset.id;
        
        if (action === 'export') {
          // TODO: Implement export
          console.log('Export conversation:', id);
          alert('Export functionality coming soon!');
        } else if (action === 'view') {
          // Open detail modal
          window.conversationModal.show(id);
        }
      }
    }

    // Handle pagination
    function handlePagination(direction) {
      const url = new URL(window.location.href);
      const currentPage = parseInt(url.searchParams.get('page') || '1');
      const newPage = direction === 'next' ? currentPage + 1 : currentPage - 1;
      
      url.searchParams.set('page', newPage.toString());
      // Add cache-busting parameter
      url.searchParams.set('_cb', Date.now().toString());
      
      window.location.href = url.toString();
    }

    // Initialize on page load
    window.addEventListener('load', () => {
      displayClientCookies();

      // Add event listeners for filters
      document.getElementById('searchInput')?.addEventListener('change', applyFilters);
      document.getElementById('statusFilter')?.addEventListener('change', applyFilters);
      document.getElementById('practiceFilter')?.addEventListener('change', applyFilters);
      document.getElementById('assignedFilter')?.addEventListener('change', applyFilters);

      // Add event listeners for conversation clicks
      document.querySelector('tbody')?.addEventListener('click', handleConversationClick);
      document.querySelector('tbody')?.addEventListener('click', handleActionClick);
    });
  </script>
</BaseLayout>
---
import AdminLayout from '../../layouts/AdminLayout.astro';
import type { AdminUser } from '../../middleware/admin-auth';

// Get authenticated user from middleware
const user = Astro.locals.user as AdminUser;
const firmId = user?.firmId || 'test-firm-id';
const adminApiUrl = import.meta.env.PUBLIC_ADMIN_API_URL || 'http://localhost:8787/v1/admin';
---

<AdminLayout title="Conversations" currentPage="conversations">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Page Header -->
    <div class="mb-6 md:flex md:items-center md:justify-between">
      <div class="flex-1 min-w-0">
        <h1 class="text-2xl font-bold text-gray-900">Conversations</h1>
      </div>
      <div class="mt-4 flex md:mt-0 md:ml-4">
        <button
          id="export-btn"
          class="ml-3 inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
        >
          Export
        </button>
      </div>
    </div>

    <!-- Filters -->
    <div class="mb-6 bg-white shadow rounded-lg p-4">
      <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
        <!-- Status Filter -->
        <div>
          <label for="status-filter" class="block text-sm font-medium text-gray-700">Status</label>
          <select
            id="status-filter"
            class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
          >
            <option value="">All Statuses</option>
            <option value="active">Active</option>
            <option value="completed">Completed</option>
            <option value="terminated">Terminated</option>
          </select>
        </div>

        <!-- Priority Filter -->
        <div>
          <label for="priority-filter" class="block text-sm font-medium text-gray-700">Priority</label>
          <select
            id="priority-filter"
            class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
          >
            <option value="">All Priorities</option>
            <option value="urgent">Urgent</option>
            <option value="high">High</option>
            <option value="normal">Normal</option>
            <option value="low">Low</option>
          </select>
        </div>

        <!-- Assigned To Filter -->
        <div>
          <label for="assigned-filter" class="block text-sm font-medium text-gray-700">Assigned To</label>
          <select
            id="assigned-filter"
            class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
          >
            <option value="">All Attorneys</option>
            <option value="unassigned">Unassigned</option>
            <!-- Will be populated dynamically -->
          </select>
        </div>

        <!-- Search -->
        <div>
          <label for="search" class="block text-sm font-medium text-gray-700">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Name, email, or phone"
            class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
          />
        </div>
      </div>
      
      <div class="mt-4 flex justify-end">
        <button
          id="apply-filters"
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700"
        >
          Apply Filters
        </button>
        <button
          id="clear-filters"
          class="ml-2 inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
        >
          Clear
        </button>
      </div>
    </div>

    <!-- Conversations Table -->
    <div class="bg-white shadow rounded-lg overflow-hidden">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Client
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Status
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Phase
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Priority
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Assigned To
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Messages
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Last Activity
            </th>
            <th scope="col" class="relative px-6 py-3">
              <span class="sr-only">Actions</span>
            </th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200" id="conversations-tbody">
          <tr>
            <td colspan="8" class="px-6 py-4 text-center text-sm text-gray-500">
              Loading conversations...
            </td>
          </tr>
        </tbody>
      </table>
      
      <!-- Pagination -->
      <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
        <div class="flex-1 flex justify-between sm:hidden">
          <button
            id="prev-page-mobile"
            class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
          >
            Previous
          </button>
          <button
            id="next-page-mobile"
            class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
          >
            Next
          </button>
        </div>
        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
          <div>
            <p class="text-sm text-gray-700">
              Showing
              <span class="font-medium" id="start-count">1</span>
              to
              <span class="font-medium" id="end-count">10</span>
              of
              <span class="font-medium" id="total-count">0</span>
              results
            </p>
          </div>
          <div>
            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
              <button
                id="prev-page"
                class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
              >
                <span class="sr-only">Previous</span>
                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
              </button>
              <span id="page-numbers" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                1
              </span>
              <button
                id="next-page"
                class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
              >
                <span class="sr-only">Next</span>
                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
              </button>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script type="module">
    import { getAdminApiClient } from '../../utils/admin-api-client.js';
    
    const firmId = '${firmId}';
    const apiClient = getAdminApiClient();
    let currentPage = 1;
    let totalPages = 1;
    let filters = {};
    let useMockData = false; // Using real API

    // Load conversations
    async function loadConversations(page = 1) {
      try {
        // Show loading state
        const tbody = document.getElementById('conversations-tbody');
        tbody.innerHTML = `
          <tr>
            <td colspan="8" class="px-6 py-4 text-center text-sm text-gray-500">
              Loading conversations...
            </td>
          </tr>
        `;

        let data;
        
        if (useMockData) {
          // Mock data for development
          data = {
            conversations: [
              {
                id: '01HK8Z2X3Y4V5W6A7B8C9D0E1F',
                userName: 'John Doe',
                userEmail: 'john.doe@example.com',
                userPhone: '555-0123',
                status: 'active',
                phase: 'data_gathering',
                priority: 'normal',
                assignedTo: null,
                messageCount: 5,
                tags: ['personal-injury', 'auto-accident'],
                lastActivity: new Date().toISOString()
              },
              {
                id: '01HK8Z4X5Y6V7W8A9B0C1D2E3F',
                userName: 'Jane Smith',
                userEmail: 'jane.smith@example.com',
                status: 'completed',
                phase: 'completed',
                priority: 'high',
                assignedTo: 'Attorney Johnson',
                messageCount: 12,
                tags: ['contract-dispute'],
                lastActivity: new Date(Date.now() - 86400000).toISOString()
              }
            ],
            pagination: {
              page: page,
              limit: 10,
              total: 2,
              totalPages: 1
            }
          };
        } else {
          // Real API call
          data = await apiClient.listConversations(firmId, {
            page,
            limit: 10,
            ...filters
          });
        }

        renderConversations(data.conversations);
        updatePagination(data.pagination);
        currentPage = page;
        totalPages = data.pagination.totalPages;

      } catch (error) {
        console.error('Failed to load conversations:', error);
        
        // If API fails, try mock data
        if (!useMockData && error.error === 'network_error') {
          console.log('API unavailable, falling back to mock data');
          useMockData = true;
          return loadConversations(page);
        }
        
        showError(error.message || 'Failed to load conversations');
      }
    }

    // Render conversations table
    function renderConversations(conversations) {
      const tbody = document.getElementById('conversations-tbody');
      
      if (conversations.length === 0) {
        tbody.innerHTML = `
          <tr>
            <td colspan="8" class="px-6 py-4 text-center text-sm text-gray-500">
              No conversations found
            </td>
          </tr>
        `;
        return;
      }

      tbody.innerHTML = conversations.map(conv => `
        <tr class="hover:bg-gray-50">
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm font-medium text-gray-900">${conv.userName || 'Unknown'}</div>
            <div class="text-sm text-gray-500">${conv.userEmail || 'No email'}</div>
            ${conv.userPhone ? `<div class="text-sm text-gray-500">${conv.userPhone}</div>` : ''}
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
              conv.status === 'active' ? 'bg-green-100 text-green-800' : 
              conv.status === 'completed' ? 'bg-blue-100 text-blue-800' :
              'bg-gray-100 text-gray-800'
            }">
              ${conv.status}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${conv.phase.replace('_', ' ')}
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
              conv.priority === 'urgent' ? 'bg-red-100 text-red-800' : 
              conv.priority === 'high' ? 'bg-yellow-100 text-yellow-800' : 
              conv.priority === 'low' ? 'bg-green-100 text-green-800' :
              'bg-gray-100 text-gray-800'
            }">
              ${conv.priority}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${conv.assignedTo || '<span class="text-gray-400">Unassigned</span>'}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${conv.messageCount}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${new Date(conv.lastActivity).toLocaleString()}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <a href="/admin/conversations/${conv.id}" class="text-indigo-600 hover:text-indigo-900 mr-4">
              View
            </a>
            <button
              onclick="showQuickActions('${conv.id}')"
              class="text-gray-600 hover:text-gray-900"
            >
              <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
              </svg>
            </button>
          </td>
        </tr>
      `).join('');
    }

    // Update pagination UI
    function updatePagination(pagination) {
      document.getElementById('start-count').textContent = ((pagination.page - 1) * pagination.limit + 1).toString();
      document.getElementById('end-count').textContent = Math.min(pagination.page * pagination.limit, pagination.total).toString();
      document.getElementById('total-count').textContent = pagination.total.toString();
      document.getElementById('page-numbers').textContent = `${pagination.page} / ${pagination.totalPages}`;
      
      // Update button states
      const prevDisabled = pagination.page === 1;
      const nextDisabled = pagination.page === pagination.totalPages;
      
      document.getElementById('prev-page').disabled = prevDisabled;
      document.getElementById('next-page').disabled = nextDisabled;
      document.getElementById('prev-page-mobile').disabled = prevDisabled;
      document.getElementById('next-page-mobile').disabled = nextDisabled;
    }

    // Show error message
    function showError(message) {
      const tbody = document.getElementById('conversations-tbody');
      tbody.innerHTML = `
        <tr>
          <td colspan="8" class="px-6 py-4 text-center text-sm text-red-600">
            ${message}
          </td>
        </tr>
      `;
    }

    // Show quick actions menu
    window.showQuickActions = function(conversationId) {
      // TODO: Implement quick actions dropdown
      console.log('Quick actions for:', conversationId);
    };

    // Event listeners
    document.getElementById('apply-filters').addEventListener('click', () => {
      filters = {
        status: document.getElementById('status-filter').value,
        priority: document.getElementById('priority-filter').value,
        assignedTo: document.getElementById('assigned-filter').value,
        search: document.getElementById('search').value
      };
      
      // Remove empty filters
      Object.keys(filters).forEach(key => {
        if (!filters[key]) delete filters[key];
      });
      
      loadConversations(1);
    });

    document.getElementById('clear-filters').addEventListener('click', () => {
      document.getElementById('status-filter').value = '';
      document.getElementById('priority-filter').value = '';
      document.getElementById('assigned-filter').value = '';
      document.getElementById('search').value = '';
      filters = {};
      loadConversations(1);
    });

    document.getElementById('prev-page').addEventListener('click', () => {
      if (currentPage > 1) loadConversations(currentPage - 1);
    });

    document.getElementById('next-page').addEventListener('click', () => {
      if (currentPage < totalPages) loadConversations(currentPage + 1);
    });

    document.getElementById('prev-page-mobile').addEventListener('click', () => {
      if (currentPage > 1) loadConversations(currentPage - 1);
    });

    document.getElementById('next-page-mobile').addEventListener('click', () => {
      if (currentPage < totalPages) loadConversations(currentPage + 1);
    });

    // Load conversations on page load
    document.addEventListener('DOMContentLoaded', () => loadConversations());
  </script>
</AdminLayout>
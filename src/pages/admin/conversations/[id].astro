---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import type { AdminUser } from '../../../middleware/admin-auth';

// Get conversation ID from route params
const { id } = Astro.params;

// Get authenticated user from middleware
const user = Astro.locals.user as AdminUser;
const firmId = user?.firmId || 'test-firm-id';
const adminApiUrl = import.meta.env.PUBLIC_ADMIN_API_URL || 'http://localhost:8787/v1/admin';
---

<AdminLayout title="Conversation Details" currentPage="conversations">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Header with Back Button -->
    <div class="mb-6">
      <div class="flex items-center">
        <a 
          href="/admin/conversations" 
          class="mr-4 inline-flex items-center text-sm text-gray-500 hover:text-gray-700"
        >
          <svg class="mr-1 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 111.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
          </svg>
          Back to Conversations
        </a>
      </div>
      <h1 class="mt-2 text-2xl font-bold text-gray-900">Conversation Details</h1>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Main Content (2/3 width on large screens) -->
      <div class="lg:col-span-2 space-y-6">
        <!-- Conversation Transcript -->
        <div class="bg-white shadow rounded-lg">
          <div class="px-4 py-5 sm:px-6 border-b border-gray-200">
            <h2 class="text-lg font-medium text-gray-900">Conversation Transcript</h2>
            <p class="mt-1 text-sm text-gray-500">Full conversation history with the client</p>
          </div>
          <div class="px-4 py-5 sm:p-6">
            <div id="conversation-messages" class="space-y-4 max-h-96 overflow-y-auto">
              <!-- Messages will be loaded here -->
              <div class="text-center text-gray-500">Loading conversation...</div>
            </div>
          </div>
        </div>

        <!-- Admin Notes -->
        <div class="bg-white shadow rounded-lg">
          <div class="px-4 py-5 sm:px-6 border-b border-gray-200">
            <h2 class="text-lg font-medium text-gray-900">Internal Notes</h2>
            <p class="mt-1 text-sm text-gray-500">Notes visible only to attorneys and staff</p>
          </div>
          <div class="px-4 py-5 sm:p-6">
            <div id="admin-notes" class="space-y-4 mb-4">
              <!-- Notes will be loaded here -->
            </div>
            <form id="add-note-form" class="mt-4">
              <label for="new-note" class="sr-only">Add a note</label>
              <textarea
                id="new-note"
                rows="3"
                class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border border-gray-300 rounded-md"
                placeholder="Add a note..."
              ></textarea>
              <div class="mt-3 flex justify-end">
                <button
                  type="submit"
                  class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Add Note
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      <!-- Sidebar (1/3 width on large screens) -->
      <div class="space-y-6">
        <!-- Client Information -->
        <div class="bg-white shadow rounded-lg">
          <div class="px-4 py-5 sm:px-6 border-b border-gray-200">
            <h2 class="text-lg font-medium text-gray-900">Client Information</h2>
          </div>
          <div class="px-4 py-5 sm:p-6">
            <dl class="space-y-4" id="client-info">
              <!-- Client details will be loaded here -->
              <div class="text-gray-500">Loading...</div>
            </dl>
          </div>
        </div>

        <!-- Conversation Status -->
        <div class="bg-white shadow rounded-lg">
          <div class="px-4 py-5 sm:px-6 border-b border-gray-200">
            <h2 class="text-lg font-medium text-gray-900">Status & Assignment</h2>
          </div>
          <div class="px-4 py-5 sm:p-6">
            <form id="status-form" class="space-y-4">
              <!-- Status -->
              <div>
                <label for="status" class="block text-sm font-medium text-gray-700">Status</label>
                <select
                  id="status"
                  name="status"
                  class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                >
                  <option value="active">Active</option>
                  <option value="completed">Completed</option>
                  <option value="terminated">Terminated</option>
                </select>
              </div>

              <!-- Priority -->
              <div>
                <label for="priority" class="block text-sm font-medium text-gray-700">Priority</label>
                <select
                  id="priority"
                  name="priority"
                  class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                >
                  <option value="low">Low</option>
                  <option value="normal">Normal</option>
                  <option value="high">High</option>
                  <option value="urgent">Urgent</option>
                </select>
              </div>

              <!-- Assigned To -->
              <div>
                <label for="assigned_to" class="block text-sm font-medium text-gray-700">Assigned To</label>
                <select
                  id="assigned_to"
                  name="assigned_to"
                  class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                >
                  <option value="">Unassigned</option>
                  <!-- Will be populated with attorneys -->
                </select>
              </div>

              <!-- Tags -->
              <div>
                <label for="tags" class="block text-sm font-medium text-gray-700">Tags</label>
                <input
                  type="text"
                  id="tags"
                  name="tags"
                  placeholder="personal-injury, auto-accident"
                  class="mt-1 block w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md"
                />
                <p class="mt-1 text-xs text-gray-500">Comma-separated tags</p>
              </div>

              <div class="pt-4">
                <button
                  type="submit"
                  class="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Update Status
                </button>
              </div>
            </form>
          </div>
        </div>

        <!-- Actions -->
        <div class="bg-white shadow rounded-lg">
          <div class="px-4 py-5 sm:px-6 border-b border-gray-200">
            <h2 class="text-lg font-medium text-gray-900">Actions</h2>
          </div>
          <div class="px-4 py-5 sm:p-6 space-y-3">
            <button
              id="export-btn"
              class="w-full inline-flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Export Conversation
            </button>
            <button
              id="delete-btn"
              class="w-full inline-flex justify-center items-center px-4 py-2 border border-red-300 shadow-sm text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              Delete Conversation
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script type="module">
    import { getAdminApiClient } from '../../../utils/admin-api-client.js';
    
    const conversationId = '${id}';
    const firmId = '${firmId}';
    const apiClient = getAdminApiClient();
    let conversationData = null;
    let useMockData = false; // Using real API

    // Load conversation details
    async function loadConversation() {
      try {
        let data;
        
        if (useMockData) {
          // Mock data for development
          data = {
          id: conversationId,
          firmId: firmId,
          userName: 'John Doe',
          userEmail: 'john.doe@example.com',
          userPhone: '555-0123',
          userIdentity: {
            address: '123 Main St, Anytown, USA',
            legalArea: 'Personal Injury',
            basicSituation: 'Car accident on highway, rear-ended by commercial truck'
          },
          status: 'active',
          phase: 'data_gathering',
          priority: 'normal',
          assignedTo: null,
          tags: ['personal-injury', 'auto-accident'],
          conflictStatus: 'clear',
          messageCount: 5,
          createdAt: new Date(Date.now() - 86400000).toISOString(),
          lastActivity: new Date().toISOString(),
          messages: [
            {
              role: 'assistant',
              content: 'Hello! I\'m here to help you with your legal consultation. Could you please tell me your name?',
              timestamp: new Date(Date.now() - 3600000).toISOString()
            },
            {
              role: 'user',
              content: 'Hi, my name is John Doe',
              timestamp: new Date(Date.now() - 3500000).toISOString()
            },
            {
              role: 'assistant',
              content: 'Thank you, John. Could you briefly describe the legal matter you need help with?',
              timestamp: new Date(Date.now() - 3400000).toISOString()
            },
            {
              role: 'user',
              content: 'I was in a car accident yesterday. A truck rear-ended me on the highway.',
              timestamp: new Date(Date.now() - 3300000).toISOString()
            },
            {
              role: 'assistant',
              content: 'I\'m sorry to hear about your accident, John. That must have been frightening. Are you currently safe and have you received any medical attention?',
              timestamp: new Date(Date.now() - 3200000).toISOString()
            }
          ],
          adminMetadata: {
            notes: [
              {
                id: '1',
                content: 'Client seems to have a strong case. Commercial vehicle involved.',
                authorEmail: 'attorney@firm.com',
                createdAt: new Date(Date.now() - 1800000).toISOString()
              }
            ]
          }
        };
        } else {
          // Real API call
          data = await apiClient.getConversation(firmId, conversationId);
        }

        conversationData = data;
        
        // Render the data
        renderClientInfo(data);
        renderMessages(data.messages);
        renderNotes(data.adminMetadata?.notes || []);
        populateStatusForm(data);

      } catch (error) {
        console.error('Failed to load conversation:', error);
        
        // If API fails, try mock data
        if (!useMockData && error.error === 'network_error') {
          console.log('API unavailable, falling back to mock data');
          useMockData = true;
          return loadConversation();
        }
        
        showError(error.message || 'Failed to load conversation details');
      }
    }

    // Render client information
    function renderClientInfo(data) {
      const clientInfo = document.getElementById('client-info');
      clientInfo.innerHTML = `
        <div>
          <dt class="text-sm font-medium text-gray-500">Name</dt>
          <dd class="mt-1 text-sm text-gray-900">${data.userName || 'Unknown'}</dd>
        </div>
        <div>
          <dt class="text-sm font-medium text-gray-500">Email</dt>
          <dd class="mt-1 text-sm text-gray-900">${data.userEmail || 'Not provided'}</dd>
        </div>
        ${data.userPhone ? `
        <div>
          <dt class="text-sm font-medium text-gray-500">Phone</dt>
          <dd class="mt-1 text-sm text-gray-900">${data.userPhone}</dd>
        </div>
        ` : ''}
        ${data.userIdentity?.address ? `
        <div>
          <dt class="text-sm font-medium text-gray-500">Address</dt>
          <dd class="mt-1 text-sm text-gray-900">${data.userIdentity.address}</dd>
        </div>
        ` : ''}
        <div>
          <dt class="text-sm font-medium text-gray-500">Legal Area</dt>
          <dd class="mt-1 text-sm text-gray-900">${data.userIdentity?.legalArea || 'Not specified'}</dd>
        </div>
        <div>
          <dt class="text-sm font-medium text-gray-500">Created</dt>
          <dd class="mt-1 text-sm text-gray-900">${new Date(data.createdAt).toLocaleString()}</dd>
        </div>
        <div>
          <dt class="text-sm font-medium text-gray-500">Conflict Status</dt>
          <dd class="mt-1">
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
              data.conflictStatus === 'clear' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
            }">
              ${data.conflictStatus}
            </span>
          </dd>
        </div>
      `;
    }

    // Render conversation messages
    function renderMessages(messages) {
      const container = document.getElementById('conversation-messages');
      container.innerHTML = messages.map(msg => `
        <div class="flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}">
          <div class="${msg.role === 'user' ? 'bg-blue-100' : 'bg-gray-100'} rounded-lg px-4 py-2 max-w-xs lg:max-w-md">
            <p class="text-sm text-gray-900">${msg.content}</p>
            <p class="text-xs text-gray-500 mt-1">${new Date(msg.timestamp).toLocaleTimeString()}</p>
          </div>
        </div>
      `).join('');
      
      // Scroll to bottom
      container.scrollTop = container.scrollHeight;
    }

    // Render admin notes
    function renderNotes(notes) {
      const container = document.getElementById('admin-notes');
      if (notes.length === 0) {
        container.innerHTML = '<p class="text-sm text-gray-500">No notes yet</p>';
        return;
      }
      
      container.innerHTML = notes.map(note => `
        <div class="bg-yellow-50 border border-yellow-200 rounded-md p-3">
          <p class="text-sm text-gray-900">${note.content}</p>
          <p class="text-xs text-gray-500 mt-1">
            ${note.authorEmail} - ${new Date(note.createdAt).toLocaleString()}
          </p>
        </div>
      `).join('');
    }

    // Populate status form
    function populateStatusForm(data) {
      document.getElementById('status').value = data.status;
      document.getElementById('priority').value = data.priority;
      document.getElementById('assigned_to').value = data.assignedTo || '';
      document.getElementById('tags').value = data.tags?.join(', ') || '';
    }

    // Show error message
    function showError(message) {
      // You could show a toast notification here
      console.error(message);
    }

    // Handle add note form
    document.getElementById('add-note-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const noteContent = document.getElementById('new-note').value.trim();
      
      if (!noteContent) return;
      
      try {
        let newNote;
        
        if (!useMockData) {
          // Real API call
          newNote = await apiClient.addNote(firmId, conversationId, noteContent);
        } else {
          // Mock adding the note
          console.log('Mock add note:', noteContent);
          newNote = {
          id: Date.now().toString(),
          content: noteContent,
          authorEmail: 'current.user@firm.com',
          createdAt: new Date().toISOString()
        };
        }
        
        // Update local data
        if (!conversationData.adminMetadata) {
          conversationData.adminMetadata = { notes: [] };
        }
        if (!conversationData.adminMetadata.notes) {
          conversationData.adminMetadata.notes = [];
        }
        conversationData.adminMetadata.notes.push(newNote);
        renderNotes(conversationData.adminMetadata.notes);
        
        // Clear form
        document.getElementById('new-note').value = '';
        
      } catch (error) {
        console.error('Failed to add note:', error);
        showError(error.message || 'Failed to add note');
      }
    });

    // Handle status form
    document.getElementById('status-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = {
        status: document.getElementById('status').value,
        priority: document.getElementById('priority').value,
        assignedTo: document.getElementById('assigned_to').value || null,
        tags: document.getElementById('tags').value.split(',').map(t => t.trim()).filter(Boolean)
      };
      
      try {
        if (!useMockData) {
          // Real API call
          await apiClient.updateConversation(firmId, conversationId, formData);
        } else {
          // Mock update
          console.log('Mock update:', formData);
        }
        
        // Show success feedback
        const button = e.target.querySelector('button[type="submit"]');
        const originalText = button.textContent;
        button.textContent = 'Updated!';
        button.classList.add('bg-green-600', 'hover:bg-green-700');
        
        setTimeout(() => {
          button.textContent = originalText;
          button.classList.remove('bg-green-600', 'hover:bg-green-700');
        }, 2000);
        
      } catch (error) {
        console.error('Failed to update status:', error);
        showError(error.message || 'Failed to update status');
      }
    });

    // Handle export button
    document.getElementById('export-btn').addEventListener('click', () => {
      // In production, this would trigger an export
      console.log('Exporting conversation:', conversationId);
      alert('Export functionality will be implemented with the API integration');
    });

    // Handle delete button
    document.getElementById('delete-btn').addEventListener('click', async () => {
      if (!confirm('Are you sure you want to delete this conversation? This action cannot be undone.')) {
        return;
      }
      
      try {
        if (!useMockData) {
          // Real API call
          await apiClient.deleteConversation(firmId, conversationId);
          // Redirect after successful deletion
          window.location.href = '/admin/conversations';
        } else {
          // Mock delete
          console.log('Mock delete conversation:', conversationId);
          alert('Mock mode: Would delete conversation and redirect to list');
        }
        
      } catch (error) {
        console.error('Failed to delete conversation:', error);
        showError(error.message || 'Failed to delete conversation');
      }
    });

    // Load conversation on page load
    document.addEventListener('DOMContentLoaded', loadConversation);
  </script>
</AdminLayout>
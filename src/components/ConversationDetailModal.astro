---
// This component is included in the page and hidden by default
// JavaScript will show/hide it and populate the content
---

<div id="conversationModal" class="fixed inset-0 z-50 hidden overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
  <!-- Background overlay -->
  <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" id="modalOverlay"></div>

  <!-- Modal panel -->
  <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
    <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl">
      <!-- Modal header -->
      <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
        <div class="flex items-center justify-between border-b pb-4">
          <h3 class="text-lg font-semibold leading-6 text-gray-900" id="modal-title">
            Conversation Details
          </h3>
          <button type="button" class="text-gray-400 hover:text-gray-500" id="closeModal">
            <span class="sr-only">Close</span>
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <!-- Modal content -->
        <div class="mt-4">
          <!-- Client info section -->
          <div class="mb-6 grid grid-cols-2 gap-4">
            <div>
              <h4 class="text-sm font-medium text-gray-500">Client Information</h4>
              <div class="mt-2">
                <p class="text-sm font-semibold text-gray-900" id="modalClientName">-</p>
                <p class="text-sm text-gray-600" id="modalClientEmail">-</p>
                <p class="text-sm text-gray-600" id="modalClientPhone">-</p>
              </div>
            </div>
            <div>
              <h4 class="text-sm font-medium text-gray-500">Case Details</h4>
              <div class="mt-2">
                <p class="text-sm text-gray-900">
                  <span class="font-medium">Practice Area:</span> 
                  <span id="modalPracticeArea">-</span>
                </p>
                <p class="text-sm text-gray-900">
                  <span class="font-medium">Status:</span> 
                  <span id="modalStatus" class="inline-flex px-2 py-1 text-xs font-semibold rounded-full">-</span>
                </p>
                <p class="text-sm text-gray-900">
                  <span class="font-medium">Assigned To:</span> 
                  <span id="modalAssignedTo">-</span>
                </p>
              </div>
            </div>
          </div>

          <!-- Messages section -->
          <div class="border-t pt-4">
            <h4 class="text-sm font-medium text-gray-500 mb-3">Conversation History</h4>
            <div id="modalMessages" class="space-y-4 max-h-96 overflow-y-auto">
              <!-- Messages will be populated here -->
            </div>
          </div>

          <!-- Loading state -->
          <div id="modalLoading" class="hidden py-12 text-center">
            <div class="inline-flex items-center">
              <svg class="animate-spin h-5 w-5 mr-3 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Loading conversation...
            </div>
          </div>

          <!-- Error state -->
          <div id="modalError" class="hidden py-12 text-center">
            <div class="text-red-600 mb-2">
              <svg class="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <p class="text-gray-700">Failed to load conversation details</p>
          </div>
        </div>
      </div>

      <!-- Modal footer -->
      <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
        <button type="button" class="inline-flex w-full justify-center rounded-md bg-lexara-darkNavy px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-lexara-lightNavy sm:ml-3 sm:w-auto" id="exportButton">
          Export
        </button>
        <button type="button" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto" id="closeModalFooter">
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Modal management functions
  window.conversationModal = {
    show: function(conversationId) {
      const modal = document.getElementById('conversationModal');
      modal.classList.remove('hidden');
      this.loadConversation(conversationId);
    },

    hide: function() {
      const modal = document.getElementById('conversationModal');
      modal.classList.add('hidden');
    },

    loadConversation: async function(conversationId) {
      // Show loading state
      document.getElementById('modalLoading').classList.remove('hidden');
      document.getElementById('modalError').classList.add('hidden');
      document.getElementById('modalMessages').innerHTML = '';

      try {
        // Fetch conversation details
        const response = await fetch(`/api/firm/conversations/${conversationId}`);
        const data = await response.json();

        if (data.success) {
          this.populateModal(data.data.conversation);
        } else {
          throw new Error('Failed to load conversation');
        }
      } catch (error) {
        document.getElementById('modalLoading').classList.add('hidden');
        document.getElementById('modalError').classList.remove('hidden');
        console.error('Error loading conversation:', error);
      }
    },

    populateModal: function(conversation) {
      // Hide loading
      document.getElementById('modalLoading').classList.add('hidden');

      // Populate client info
      document.getElementById('modalClientName').textContent = conversation.clientName;
      document.getElementById('modalClientEmail').textContent = conversation.clientEmail;
      document.getElementById('modalClientPhone').textContent = conversation.clientPhone || 'Not provided';

      // Populate case details
      document.getElementById('modalPracticeArea').textContent = this.formatPracticeArea(conversation.practiceArea);
      
      const statusElement = document.getElementById('modalStatus');
      statusElement.textContent = conversation.status;
      statusElement.className = `inline-flex px-2 py-1 text-xs font-semibold rounded-full ${this.getStatusColor(conversation.status)}`;
      
      document.getElementById('modalAssignedTo').textContent = conversation.assignedToName || 'Unassigned';

      // Populate messages
      const messagesContainer = document.getElementById('modalMessages');
      if (conversation.messages && conversation.messages.length > 0) {
        messagesContainer.innerHTML = conversation.messages.map(msg => `
          <div class="flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}">
            <div class="${msg.role === 'user' ? 'bg-lexara-skyBlue text-lexara-darkNavy' : 'bg-lexara-darkNavy text-white'} rounded-lg px-4 py-2 max-w-md">
              <p class="text-sm">${msg.content}</p>
              <p class="text-xs mt-1 opacity-70">${new Date(msg.timestamp).toLocaleString()}</p>
            </div>
          </div>
        `).join('');
      } else {
        messagesContainer.innerHTML = '<p class="text-center text-gray-500">No messages available</p>';
      }

      // Set up export button
      document.getElementById('exportButton').onclick = () => this.exportConversation(conversation.sessionId);
    },

    formatPracticeArea: function(area) {
      return area.split('_').map(word => 
        word.charAt(0).toUpperCase() + word.slice(1)
      ).join(' ');
    },

    getStatusColor: function(status) {
      switch (status) {
        case 'active': return 'bg-green-100 text-green-800';
        case 'completed': return 'bg-blue-100 text-blue-800';
        case 'terminated': return 'bg-red-100 text-red-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    },

    exportConversation: function(conversationId) {
      // TODO: Implement export functionality
      console.log('Export conversation:', conversationId);
      alert('Export functionality coming soon!');
    }
  };

  // Set up event listeners
  document.getElementById('closeModal').addEventListener('click', () => conversationModal.hide());
  document.getElementById('closeModalFooter').addEventListener('click', () => conversationModal.hide());
  document.getElementById('modalOverlay').addEventListener('click', () => conversationModal.hide());

  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !document.getElementById('conversationModal').classList.contains('hidden')) {
      conversationModal.hide();
    }
  });
</script>
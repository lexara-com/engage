---
export interface Props {
  requiredRoles?: string[];
  redirectTo?: string;
}

const { requiredRoles = [], redirectTo = '/firm/login' } = Astro.props;
const { isAuthenticated, user } = Astro.locals;

// Check if user is authenticated
if (!isAuthenticated) {
  return Astro.redirect(redirectTo + '?returnTo=' + encodeURIComponent(Astro.url.pathname));
}

// Check if user has required roles
if (requiredRoles.length > 0 && user) {
  const userRoles = user.roles || [];
  
  // Map old role format to new format for compatibility
  const mappedRequiredRoles = requiredRoles.map(role => {
    if (role === 'firm:admin') return 'admin';
    if (role === 'firm:lawyer') return 'lawyer';
    if (role === 'firm:staff') return 'staff';
    if (role === 'firm:viewer') return 'viewer';
    return role;
  });
  
  const hasRequiredRole = mappedRequiredRoles.some(role => userRoles.includes(role));
  
  console.log('ProtectedRoute check:', {
    requiredRoles,
    mappedRequiredRoles,
    userRoles,
    hasRequiredRole,
    user: user.email
  });
  
  if (!hasRequiredRole) {
    // User doesn't have required role, redirect to dashboard with error
    return Astro.redirect('/firm/dashboard?error=unauthorized');
  }
}
---

<slot />